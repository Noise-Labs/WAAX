!function(){if("undefined"==typeof navigator.requestMIDIAccess)throw new Error("[Ktrl] your browser does not support Web MIDI API. Halt.")}(),Ktrl=function(){function MIDISource(midiinput){this.input=midiinput,this.targets=[];var me=this;this.input.onmidimessage=function(e){for(var c=me.targets.length;c--;)me.targets[c].ondata(e)}}function MIDITarget(label){this.id=targetId++,this.label=label||"Untitled",this.active=!1,this.process=function(){};var me=this;this.ondata=function(e){me.active&&me.process(e)},targets.push(this)}function createTarget(label){return new MIDITarget(label)}function routeAllToTarget(target){return sources.map(function(s){s.addTarget(target)}),!0}function routeSourceToTarget(sourceId,target){return sourceId<sources.length?(sources.map(function(s){s.removeTarget(target)}),sources[sourceId].addTarget(target),!0):(post("invalid source id or target."),!1)}function disconnectTarget(target){return sources.map(function(s){s.removeTarget(target)}),!0}function removeTarget(target){return Ktrl.disconnectTarget(target)?(targets.map(function(t){if(t===target){var idx=targets.indexOf(target);targets.splice(idx,1)}}),!0):!1}function ready(fn){"function"!=typeof fn?post("invalid handler function."):onready=fn}function report(){var counter=0;post("listing available MIDI Input Ports..."),sources.map(function(s){console.log(s.input.type,counter++,"	",s.input.name,"	",s.input.manufacturer)}),post("listing available MIDI targets..."),targets.map(function(t){console.log("id "+t.id,"	",t.label,"	",t.active)})}function post(msg){console.log("[ktrl] "+msg)}var sources=[],targets=[],targetId=0,onready=null,status=!1,version="r1";return MIDISource.prototype={constructor:MIDISource,removeTarget:function(target){var me=this;this.targets.map(function(t){if(t===target){var idx=me.targets.indexOf(target);me.targets.splice(idx,1)}})},addTarget:function(target){for(var i=0;i<this.targets.length;++i)if(this.targets[i]===target)return void post("duplicate target.");this.targets.push(target)}},MIDITarget.prototype={constructor:MIDITarget,onData:function(fn){this.process=fn},activate:function(){this.active=!0},disable:function(){this.active=!1},getID:function(){return this.id}},parse=function(midimsg){var parsedData,data=midimsg.data,type=data[0]>>4,channel=(15&data[0])+1;switch(type){case 8:parsedData={type:"noteoff",channel:channel,pitch:data[1],velocity:data[2]};break;case 9:parsedData={type:"noteon",channel:channel,pitch:data[1],velocity:data[2]};break;case 10:parsedData={type:"polypressure",channel:channel,pitch:data[1],pressure:data[2]};break;case 11:parsedData={type:"controlchange",channel:channel,control:data[1],value:data[2]};break;case 12:parsedData={type:"programchange",channel:channel,program:data[1]};break;case 13:parsedData={type:"channelpressure",channel:channel,pressure:data[1]};break;case 14:parsedData={type:"pitchwheel",channel:channel,wheel:data[1]<<8|data[2]}}return parsedData},navigator.requestMIDIAccess().then(function(midiAccess){if(0===midiAccess.inputs().length)return void post("no input ports available");for(var i=0;i<midiAccess.inputs().length;++i)sources[i]=new MIDISource(midiAccess.inputs()[i]);post("Ktrl ("+version+") is ready."),status=!0,"function"==typeof onready?onready():post("onReady is not specified.")},function(msg){post("failed to get MIDI access: "+msg),status=!1}),{createTarget:createTarget,removeTarget:removeTarget,disconnectTarget:disconnectTarget,routeAllToTarget:routeAllToTarget,routeSourceToTarget:routeSourceToTarget,ready:ready,parse:parse,report:report}}();
//# sourceMappingURL=waax_all.map